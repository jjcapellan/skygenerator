/**
 * SkyGenerator is a custom image class to create a procedural sky background using the framework Phaser 3.
 * @author       Juan Jose Capellan <soycape@hotmail.com>
 * @license      {@link https://github.com/jjcapellan/skygenerator/blob/master/LICENSE | MIT license}
 * @version      1.0.0
 */
class SkyGenerator extends Phaser.GameObjects.Image{constructor(scene,width,height,options={}){super(scene,0,0);this.scene=scene;this.width=width;this.height=height;this.backgroundColor=options.backgroundColor||35;this.globalOpacity=options.globalOpacity||.5;this.initialPointsQty=options.initialPointsQty||50;this.generatedPointsQty=options.generatedPointsQty||140;this.margin=options.margin||0;this.cloudRadius=options.cloudRadius||100;this.starHaloRadius=options.starHaloRadius||8;this.starRadius=options.starRadius||3;this.starAlpha=options.starAlpha||.9;this.haloAlpha=options.haloAlpha||.02;this.starColors=options.starColors||[16578983,16777215,10418172];this.cloud1Color=options.cloud1Color||6675959;this.cloud2Color=options.cloud2Color||8588929;this.scaleStar2=options.scaleStar2||.8;this.scaleStar3=options.scaleStar3||.4;if(this.starHaloRadius<this.starRadius){this.starHaloRadius=this.starRadius}this.init()}init(){this.skyLayer1=[];this.skyLayer2=[];this.initMap();this.initRenderTextures();this.initCloudBrush();this.initStarBrush();this.generatePoints();this.scene.cameras.main.setBackgroundColor(this.backgroundColor);this.generateTexture();this.setTexture("rt_SkyGenerator");this.setOrigin(0)}initMap(){let rectangle=new Phaser.Geom.Rectangle(this.margin,this.margin,this.width-this.margin,this.height-this.margin);for(let i=0,j=this.initialPointsQty;i<j;i++){let point=rectangle.getRandomPoint();let opacity=Math.random()*this.globalOpacity+.05;this.skyLayer1.push([point.x,point.y,opacity]);point=rectangle.getRandomPoint();opacity=Math.random()*this.globalOpacity+.05;this.skyLayer2.push([point.x,point.y,opacity])}}initRenderTextures(){let textureWidth=this.cloudRadius*2;this.cloudTexture=this.scene.make.renderTexture({width:textureWidth,height:textureWidth},false).setVisible(false);this.star1Texture=this.scene.make.renderTexture({width:this.starHaloRadius*2,height:this.starHaloRadius*2},false).setVisible(false);this.star2Texture=this.scene.make.renderTexture({width:this.starHaloRadius*2*this.scaleStar2,height:this.starHaloRadius*2*this.scaleStar2},false).setVisible(false);this.star3Texture=this.scene.make.renderTexture({width:this.starHaloRadius*2.2*this.scaleStar3,height:this.starHaloRadius*2.2*this.scaleStar3},false).setVisible(false)}initCloudBrush(){let brush=this.scene.add.graphics();let textureWidth=this.cloudRadius*2;let cloudAlpha=this.globalOpacity/this.cloudRadius;if(cloudAlpha<.005)cloudAlpha=.005;brush.setVisible(false);for(let i=2;i<this.cloudRadius+1;i++){brush.fillStyle(16777215,cloudAlpha);brush.fillCircle(0,0,i)}this.cloudTexture.draw(brush,textureWidth/2,textureWidth/2)}initStarBrush(){let brush=this.scene.add.graphics();brush.setVisible(false);brush.fillStyle(16777215,this.haloAlpha);brush.fillCircle(0,0,this.starHaloRadius);brush.fillStyle(16777215,this.starAlpha);brush.fillCircle(0,0,this.starRadius);this.star1Texture.draw(brush,this.starHaloRadius,this.starHaloRadius);let star2Radius=Math.round(this.starRadius*this.scaleStar2);brush.clear();brush.fillStyle(16777215,this.haloAlpha);brush.fillCircle(0,0,this.starHaloRadius*this.scaleStar2);brush.fillStyle(16777215,this.starAlpha);brush.fillCircle(0,0,star2Radius);this.star2Texture.draw(brush,this.star2Texture.width/2,this.star2Texture.width/2);brush.clear();brush.fillStyle(16777215,this.haloAlpha);brush.fillCircle(0,0,this.starHaloRadius*this.scaleStar3);brush.fillStyle(16777215,this.starAlpha);brush.fillCircle(0,0,this.starRadius*this.scaleStar3);this.star3Texture.draw(brush,this.star3Texture.width/2,this.star3Texture.width/2)}generateTexture(){let rt=this.scene.make.renderTexture({x:0,y:0,width:this.width,height:this.height},false);rt.setOrigin(0,0);for(let i=0,j=this.skyLayer1.length;i<j;i++){let cloudScale=Math.random()*.4+.6;this.cloudTexture.setPosition(this.skyLayer1[i][0],this.skyLayer1[i][1]).setTint(this.cloud1Color).setAlpha(this.skyLayer1[i][2]/3).setScale(cloudScale,cloudScale).setVisible(false);rt.draw(this.cloudTexture);this.cloudTexture.setPosition(this.skyLayer2[i][0],this.skyLayer2[i][1]).setTint(this.cloud2Color).setAlpha(this.skyLayer2[i][2]/3).setScale(cloudScale,cloudScale).setVisible(false);let starTexture=Phaser.Math.RND.pick([this.star1Texture,this.star2Texture,this.star3Texture]);starTexture.setPosition(this.skyLayer2[i][0],this.skyLayer2[i][1]).setAlpha(this.skyLayer2[i][2]*(this.starAlpha/this.globalOpacity)).setTint(Phaser.Math.RND.pick(this.starColors));rt.draw([this.cloudTexture,starTexture])}rt.saveTexture("rt_SkyGenerator")}generatePoints(){for(let i=0;i<this.generatedPointsQty;i++){let point1=Phaser.Math.RND.pick(this.skyLayer1);let point2=Phaser.Math.RND.pick(this.skyLayer1);let point3=Phaser.Math.RND.pick(this.skyLayer1);let x=Phaser.Math.Average([point1[0],point2[0],point3[0]]);let y=Phaser.Math.Average([point1[1],point2[1],point3[0]]);let opacity=Phaser.Math.Average([point1[2],point2[2],point3[0]])+(Math.random()*10-10)/100;opacity=Phaser.Math.Clamp(opacity,.05,this.globalOpacity);this.skyLayer1.push([x,y,opacity]);point1=Phaser.Math.RND.pick(this.skyLayer1);point2=Phaser.Math.RND.pick(this.skyLayer1);point3=Phaser.Math.RND.pick(this.skyLayer1);x=Phaser.Math.Average([point1[0],point2[0],point3[0]]);y=Phaser.Math.Average([point1[1],point2[1],point3[0]]);opacity=Phaser.Math.Average([point1[2],point2[2],point3[0]])+(Math.random()*10-10)/100;opacity=Phaser.Math.Clamp(opacity,.05,this.globalOpacity);this.skyLayer2.push([x,y,opacity])}}}